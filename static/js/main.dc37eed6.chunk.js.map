{"version":3,"sources":["Button.jsx","Calculator.jsx","utils.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","props","blueElements","value","push","className","includes","onClick","toString","keys","Calculator","handleCalculate","s","state","q","join","document","getElementById","calc","currentOp","ops","a","b","Math","pow","x","newCalc","i","length","j","console","log","calculate","ch","calculation","current","charAt","indexOf","parseFloat","parseCalculationString","handleClick","e","v","target","setState","onChange","this","handleChange","id","type","map","item","Button","React","Component","Parent","Boolean","window","location","hostname","match","ReactDOM","render","App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc37eed6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./calculator.css\";\r\n\r\nconst Buttons = props => {\r\n  const blueElements = [];\r\n  if (\r\n    props.value === \"/\" ||\r\n    props.value === \"x\" ||\r\n    props.value === \"-\" ||\r\n    props.value === \"+\" ||\r\n    props.value === \"=\"\r\n  ) {\r\n    blueElements.push(props.value);\r\n  }\r\n\r\n  return (\r\n    <button\r\n      className={blueElements.includes(props.value) ? \"but\" : \"button\"}\r\n      onClick={props.onClick}\r\n      value={props.value.toString()}\r\n    >\r\n      {props.value.toString() === \"/\" ? \"รท\" : props.value.toString()}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import React from \"react\";\r\nimport { calculate, parseCalculationString } from \"./utils\";\r\nimport Buttons from \"./Button\";\r\n\r\nconst keys = [\r\n  [\"C\", \"+/-\", \"%\", \"/\"],\r\n  [\"7\", \"8\", \"9\", \"x\"],\r\n  [\"4\", \"5\", \"6\", \"-\"],\r\n  [\"1\", \"2\", \"3\", \"+\"],\r\n  [\"0\", \".\", \"=\"]\r\n];\r\n\r\nclass Calculator extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { q: [] };\r\n  }\r\n\r\n  handleCalculate = () => {\r\n    let s = this.state.q.join(\"\");\r\n    // console.log(this.calculate(this.parseCalculationString(s)));\r\n    document.getElementById(\"result\").value = calculate(\r\n      parseCalculationString(s)\r\n    );\r\n  };\r\n\r\n  handleClick = e => {\r\n    let v;\r\n\r\n    if (e.target.value === \"C\") {\r\n      this.setState({ q: [] });\r\n      document.getElementById(\"result\").value = \"\";\r\n    } else if (e.target.value == \"+/-\") {\r\n      v = \"+\";\r\n      const q = this.state.q;\r\n      q.push(v);\r\n\r\n      this.setState({ q: q });\r\n    } else if (e.target.value === \"=\") {\r\n      this.handleCalculate();\r\n    } else {\r\n      v = e.target.value;\r\n\r\n      const q = this.state.q;\r\n      q.push(v);\r\n\r\n      this.setState({ q: q });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"Button-Box\">\r\n          <input\r\n            onChange={this.handleChange}\r\n            id=\"displaybox\"\r\n            className=\"tbox\"\r\n            value={this.state.q.join(\"\")}\r\n            type=\"text\"\r\n          ></input>\r\n          <input id=\"result\" className=\"tbox rbox\" type=\"text\"></input>\r\n          <div>\r\n            {keys[0].map(item => (\r\n              <Buttons onClick={this.handleClick} value={item}></Buttons>\r\n            ))}\r\n          </div>\r\n          <div>\r\n            {keys[1].map(item => (\r\n              <Buttons onClick={this.handleClick} value={item}></Buttons>\r\n            ))}\r\n          </div>\r\n          <div>\r\n            {keys[2].map(item => (\r\n              <Buttons onClick={this.handleClick} value={item}></Buttons>\r\n            ))}\r\n          </div>\r\n          <div>\r\n            {keys[3].map(item => (\r\n              <Buttons onClick={this.handleClick} value={item}></Buttons>\r\n            ))}\r\n          </div>\r\n          <div>\r\n            {keys[4].map(item => (\r\n              <Buttons onClick={this.handleClick} value={item}></Buttons>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","export function parseCalculationString(s) {\r\n  // --- Parse a calculation string into an array of numbers and operators\r\n  var calculation = [],\r\n    current = \"\";\r\n  for (var i = 0, ch; (ch = s.charAt(i)); i++) {\r\n    if (\"^x/+-\".indexOf(ch) > -1) {\r\n      if (current === \"\" && ch === \"-\") {\r\n        current = \"-\";\r\n      } else {\r\n        calculation.push(parseFloat(current), ch);\r\n        current = \"\";\r\n      }\r\n    } else {\r\n      current += s.charAt(i);\r\n    }\r\n  }\r\n  if (current !== \"\") {\r\n    calculation.push(parseFloat(current));\r\n  }\r\n  //  console.log(calculation);\r\n  return calculation;\r\n}\r\n\r\nexport function calculate(calc) {\r\n  // --- Perform a calculation expressed as an array of operators and numbers\r\n  var ops = [\r\n      { \"^\": (a, b) => Math.pow(a, b) },\r\n      { x: (a, b) => a * b, \"/\": (a, b) => a / b },\r\n      { \"+\": (a, b) => a + b, \"-\": (a, b) => a - b }\r\n    ],\r\n    newCalc = [],\r\n    currentOp;\r\n  for (var i = 0; i < ops.length; i++) {\r\n    for (var j = 0; j < calc.length; j++) {\r\n      if (ops[i][calc[j]]) {\r\n        currentOp = ops[i][calc[j]];\r\n      } else if (currentOp) {\r\n        newCalc[newCalc.length - 1] = currentOp(\r\n          newCalc[newCalc.length - 1],\r\n          calc[j]\r\n        );\r\n        currentOp = null;\r\n      } else {\r\n        newCalc.push(calc[j]);\r\n      }\r\n      //console.log(newCalc);\r\n    }\r\n    calc = newCalc;\r\n    newCalc = [];\r\n  }\r\n  if (calc.length > 1) {\r\n    console.log(\"Error: unable to resolve calculation\");\r\n    return calc;\r\n  } else {\r\n    return calc[0];\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport Calculator from \"./Calculator\";\n\nclass Parent extends Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  render() {\n    return <Calculator />;\n  }\n}\n\nexport default Parent;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}